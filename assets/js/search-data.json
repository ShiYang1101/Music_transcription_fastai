{
  
    
        "post0": {
            "title": "Title",
            "content": "!which python . /home/shiya/anaconda3/bin/python . import librosa import numpy as np import pandas as pd import matplotlib import seaborn as sns import glob from sklearn.model_selection import train_test_split import tensorflow as tf from tensorflow.keras import layers, models import os import spectogram from spectogram import generate_spec . 2022-07-01 12:19:16.708255: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#39;libcudart.so.11.0&#39;; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 2022-07-01 12:19:16.708298: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine. . dir(spectogram) . [&#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;generate_spec&#39;, &#39;get_spec&#39;, &#39;glob&#39;, &#39;librosa&#39;, &#39;os&#39;] . import librosa # 1. Get the file path to an included audio example filename = librosa.example(&#39;nutcracker&#39;) # 2. Load the audio as a waveform `y` # Store the sampling rate as `sr` y, sr = librosa.load(filename) print(y) # 3. Run the default beat tracker tempo, beat_frames = librosa.beat.beat_track(y=y, sr=sr) print(&#39;Estimated tempo: {:.2f} beats per minute&#39;.format(tempo)) # 4. Convert the frame indices of beat events into timestamps beat_times = librosa.frames_to_time(beat_frames, sr=sr) . [ 2.2716861e-06 5.3327208e-06 -7.2473290e-06 ... 1.1170751e-05 1.2871884e-06 5.4120628e-06] Estimated tempo: 107.67 beats per minute . y, sr = librosa.load(librosa.ex(&#39;trumpet&#39;)) spec = librosa.feature.melspectrogram(y=y, sr=sr) . y.shape . (117601,) . print(sr) . 22050 . sns.heatmap(spec) . &lt;AxesSubplot:&gt; . sns.heatmap(librosa.amplitude_to_db(librosa.stft(y, n_fft = 512)), cmap = &#39;rocket&#39;) . /home/shiya/anaconda3/lib/python3.9/site-packages/librosa/util/decorators.py:88: UserWarning: amplitude_to_db was called on complex input so phase information will be discarded. To suppress this warning, call amplitude_to_db(np.abs(S)) instead. return f(*args, **kwargs) . &lt;AxesSubplot:&gt; . print(librosa.stft.doc) . !pwd . /home/shiya/Documents/capstone . glob.glob(&#39;**/*.wav&#39;, recursive = True); . !pwd . /home/shiya/Documents/capstone . spectogram.generate_spec(&#39;_OrchideaSOL2020_release/OrchideaSOL2020/PluckedStrings/Harp/pizzicato_bartok/Hp-pizz_bartok-G3-ff-N-N.wav&#39;) . array([[-9.3983687e-02+0.0000000e+00j, 3.0973896e-01+0.0000000e+00j, 9.2532182e-01+0.0000000e+00j, ..., 4.9686246e-04+0.0000000e+00j, 2.0168905e-04+0.0000000e+00j, -6.0309016e-05+0.0000000e+00j], [ 2.3246935e-01-6.8776809e-02j, -2.4772285e-01+4.6538883e-01j, -3.1999373e-01+1.2587070e-01j, ..., -4.2304434e-04-6.7611596e-05j, -4.7366299e-05-2.3558349e-04j, 7.5026663e-05-1.7259994e-05j], [-7.0861213e-02+4.3452945e-01j, 2.8569469e-01-6.6865003e-01j, -4.5560390e-01+2.8443682e-01j, ..., 1.5343947e-04+5.8573420e-05j, -1.0121427e-04+1.0541588e-04j, -2.7845117e-05-5.6573767e-06j], ..., [-4.8280082e-05-3.4453042e-05j, 4.3312728e-05+1.5617605e-05j, -4.9169398e-06+5.5657561e-06j, ..., -3.1043987e-10+1.2199388e-11j, -1.2095133e-09-9.8075981e-10j, 4.3498621e-10+2.3146814e-11j], [ 4.5119807e-05+1.0683687e-05j, -7.1576579e-07-2.9762465e-05j, 8.0810111e-08+4.3964337e-06j, ..., -1.9419237e-09+1.2831366e-09j, 2.4186328e-10+1.1008202e-09j, 2.3666141e-10-2.2833714e-10j], [-4.1087664e-05+0.0000000e+00j, -2.1959126e-05+0.0000000e+00j, 3.3843062e-06+0.0000000e+00j, ..., 2.8019687e-09+0.0000000e+00j, 4.4597165e-10+0.0000000e+00j, -4.8142929e-10+0.0000000e+00j]], dtype=complex64) . spec_shape = spectogram.generate_spec(&#39;_OrchideaSOL2020_release/OrchideaSOL2020/PluckedStrings/Harp/pizzicato_bartok/Hp-pizz_bartok-G3-ff-N-N.wav&#39;).shape . librosa.stft(y, n_fft = 512) . array([[ 2.1919990e-03+0.0000000e+00j, -1.4984594e-03+0.0000000e+00j, -3.7925106e-03+0.0000000e+00j, ..., 2.3942404e-08+0.0000000e+00j, -1.0389048e-07+0.0000000e+00j, -1.2857109e-06+0.0000000e+00j], [-5.7481867e-03-4.3230206e-03j, 5.6010368e-03-3.8339014e-04j, -4.0086496e-04+5.5423792e-04j, ..., 3.1411400e-08-8.3640463e-09j, -5.0904543e-08-4.7256105e-08j, 5.4454540e-07-1.1114313e-06j], [ 1.4769356e-02+2.3543192e-03j, -1.0303578e-02-1.2755980e-02j, -8.4517188e-03+1.0901684e-02j, ..., 4.4940474e-08-2.8125244e-09j, -6.4107148e-08-7.2129964e-08j, 7.4693628e-07+9.8385283e-07j], ..., [-7.2194997e-04+2.3245620e-05j, 3.5452374e-04-1.9947761e-06j, 1.4692579e-06+1.2078042e-06j, ..., -2.5920308e-04+1.0048603e-04j, 2.7742214e-04-3.2669326e-04j, -1.3921515e-04+2.6892315e-04j], [ 7.3494151e-04-1.2279861e-05j, -6.8163592e-07-3.6527147e-04j, -7.4732316e-06-1.6873730e-07j, ..., -3.6945427e-04-6.0778329e-05j, -4.1615972e-04+2.4738853e-04j, -5.8097961e-05+2.9267450e-05j], [-7.4245437e-04+0.0000000e+00j, -3.6368036e-04+0.0000000e+00j, 1.1729560e-06+0.0000000e+00j, ..., 7.8619935e-04+0.0000000e+00j, 6.0775608e-04+0.0000000e+00j, 3.2179200e-04+0.0000000e+00j]], dtype=complex64) . !ls . image.png _OrchideaSOL2020_release spectogram.py __MACOSX _OrchideaSOL2020_release.zip wav_converter.py model.png OrchideaSOL_metadata.csv music_transcription.ipynb __pycache__ . meta_df = pd.read_csv(&#39;OrchideaSOL_metadata.csv&#39;) meta_df.head() . Path Family (abbr.) Family (in full) Instrument (abbr.) Instrument (in full) Technique (abbr.) Technique (in full) Pitch Pitch ID (if applicable) Dynamics Dynamics ID (if applicable) Instance ID Mute (abbr.) Mute (in full) String ID (if applicable) Needed digital retuning Fold . 0 Brass/Bass_Tuba+sordina/ordinario/BTb+S-ord-A#... | Brass | Brass | BTb | Bass Tuba | ord | ordinario | A#0 | 22.0 | f | 3.0 | 0.0 | S | Sordina | NaN | False | 2 | . 1 Brass/Bass_Tuba+sordina/ordinario/BTb+S-ord-A#... | Brass | Brass | BTb | Bass Tuba | ord | ordinario | A#0 | 22.0 | p | 1.0 | 0.0 | S | Sordina | NaN | True | 0 | . 2 Brass/Bass_Tuba+sordina/ordinario/BTb+S-ord-A#... | Brass | Brass | BTb | Bass Tuba | ord | ordinario | A#1 | 34.0 | f | 3.0 | 0.0 | S | Sordina | NaN | True | 1 | . 3 Brass/Bass_Tuba+sordina/ordinario/BTb+S-ord-A#... | Brass | Brass | BTb | Bass Tuba | ord | ordinario | A#1 | 34.0 | p | 1.0 | 0.0 | S | Sordina | NaN | True | 2 | . 4 Brass/Bass_Tuba+sordina/ordinario/BTb+S-ord-A#... | Brass | Brass | BTb | Bass Tuba | ord | ordinario | A#2 | 46.0 | f | 3.0 | 0.0 | S | Sordina | NaN | True | 1 | . meta_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 13265 entries, 0 to 13264 Data columns (total 17 columns): # Column Non-Null Count Dtype -- -- 0 Path 13265 non-null object 1 Family (abbr.) 13265 non-null object 2 Family (in full) 13265 non-null object 3 Instrument (abbr.) 13265 non-null object 4 Instrument (in full) 13265 non-null object 5 Technique (abbr.) 13265 non-null object 6 Technique (in full) 13265 non-null object 7 Pitch 13265 non-null object 8 Pitch ID (if applicable) 13162 non-null float64 9 Dynamics 13265 non-null object 10 Dynamics ID (if applicable) 12646 non-null float64 11 Instance ID 13262 non-null float64 12 Mute (abbr.) 13265 non-null object 13 Mute (in full) 13265 non-null object 14 String ID (if applicable) 7516 non-null float64 15 Needed digital retuning 13265 non-null bool 16 Fold 13265 non-null int64 dtypes: bool(1), float64(4), int64(1), object(11) memory usage: 1.6+ MB . meta_df.describe() . Pitch ID (if applicable) Dynamics ID (if applicable) Instance ID String ID (if applicable) Fold . count 13162.000000 | 12646.000000 | 13262.000000 | 7516.000000 | 13265.000000 | . mean 63.842653 | 2.073857 | 0.848138 | 2.360298 | 2.000000 | . std 16.512067 | 1.329919 | 1.177874 | 1.196041 | 1.414267 | . min 20.000000 | 0.000000 | 0.000000 | 1.000000 | 0.000000 | . 25% 52.000000 | 2.000000 | 0.000000 | 1.000000 | 1.000000 | . 50% 64.000000 | 2.000000 | 0.000000 | 2.000000 | 2.000000 | . 75% 76.000000 | 3.000000 | 2.000000 | 3.000000 | 3.000000 | . max 109.000000 | 4.000000 | 12.000000 | 6.000000 | 4.000000 | . meta_df.isnull().sum() . Path 0 Family (abbr.) 0 Family (in full) 0 Instrument (abbr.) 0 Instrument (in full) 0 Technique (abbr.) 0 Technique (in full) 0 Pitch 0 Pitch ID (if applicable) 103 Dynamics 0 Dynamics ID (if applicable) 619 Instance ID 3 Mute (abbr.) 0 Mute (in full) 0 String ID (if applicable) 5749 Needed digital retuning 0 Fold 0 dtype: int64 . meta_df[&#39;Instrument (in full)&#39;].value_counts() . Violin 1987 Viola 1952 Contrabass 1636 Cello 1593 Accordion 872 Trombone 670 Trumpet in C 590 French Horn 589 Flute 529 Harp 507 Bass Tuba 500 Clarinet in Bb 406 Alto Saxophone 377 Bassoon 358 Guitar 353 Oboe 346 Name: Instrument (in full), dtype: int64 . len(meta_df[&#39;Instrument (in full)&#39;].unique()) . 16 . We don&#39;really care about the pitchID, Dynamics Id and String ID. . First baseline model is to predict the instrument present in the audio file. . train_df, test_df = train_test_split(meta_df, train_size = 0.7, random_state = 42) . print(&#39;The number of rows for the training data is &#39;, train_df.shape[0]) print(&#39;The number of rows for the test data is &#39;, test_df.shape[0]) . The number of rows for the training data is 9285 The number of rows for the test data is 3980 . spec_shape . (1025, 807) . model = models.Sequential() model.add(layers.InputLayer((spec_shape[0], spec_shape[1], 1), batch_size = 50, dtype = &#39;float&#39;)) model.add(layers.Conv2D(5, 30, activation=&#39;relu&#39;)) # , input_shape = (spec_shape[0], spec_shape[1], 1))) model.add(layers.MaxPool2D((10, 10))) model.add(layers.Flatten()) model.add(layers.Dense(16, activation = &#39;sigmoid&#39;)) model.build() . tf.keras.utils.plot_model(model, show_shapes = True, show_dtype= True) . test_df = meta_df.sample(50) test_df.head(2) . Path Family (abbr.) Family (in full) Instrument (abbr.) Instrument (in full) Technique (abbr.) Technique (in full) Pitch Pitch ID (if applicable) Dynamics Dynamics ID (if applicable) Instance ID Mute (abbr.) Mute (in full) String ID (if applicable) Needed digital retuning Fold . 3747 PluckedStrings/Harp/harmonic_fingering/Hp-harm... | PluckedStrings | Plucked Strings | Hp | Harp | harm_fngr | harmonic_fingering | G#4 | 68.0 | f | 3.0 | 0.0 | N | None | NaN | False | 3 | . 11824 Winds/Clarinet_Bb/ordinario/ClBb-ord-C#6-ff-N-... | Winds | Woodwinds | ClBb | Clarinet in Bb | ord | ordinario | C#6 | 85.0 | ff | 4.0 | 0.0 | N | None | NaN | False | 3 | . batch = np.zeros((50, spec_shape[0], spec_shape[1])) true_path = glob.glob(&#39;**[!MACOSC]/*OrchideaSOL2020/&#39;, recursive=True) print(true_path) for num, path in enumerate(test_df[&#39;Path&#39;]): tmp_path = true_path[0] + path batch[num] = generate_spec(tmp_path) . [&#39;_OrchideaSOL2020_release/OrchideaSOL2020/&#39;] . ValueError Traceback (most recent call last) /home/shiya/Documents/capstone/music_transcription.ipynb Cell 32&#39; in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell:/home/shiya/Documents/capstone/music_transcription.ipynb#ch0000041?line=3&#39;&gt;4&lt;/a&gt; for num, path in enumerate(test_df[&#39;Path&#39;]): &lt;a href=&#39;vscode-notebook-cell:/home/shiya/Documents/capstone/music_transcription.ipynb#ch0000041?line=4&#39;&gt;5&lt;/a&gt; tmp_path = true_path[0] + path -&gt; &lt;a href=&#39;vscode-notebook-cell:/home/shiya/Documents/capstone/music_transcription.ipynb#ch0000041?line=5&#39;&gt;6&lt;/a&gt; batch[num] = generate_spec(tmp_path) ValueError: could not broadcast input array from shape (1025,605) into shape (1025,807) . glob.glob(&#39;**/_OrchideaSOL2020_release&#39;, recursive = True) . [&#39;_OrchideaSOL2020_release&#39;, &#39;__MACOSX/_OrchideaSOL2020_release&#39;] . os.chdir(&#39;..&#39;) . print(glob.glob.__doc__) . Return a list of paths matching a pathname pattern. The pattern may contain simple shell-style wildcards a la fnmatch. However, unlike fnmatch, filenames starting with a dot are special cases that are not matched by &#39;*&#39; and &#39;?&#39; patterns. If recursive is true, the pattern &#39;**&#39; will match any files and zero or more directories and subdirectories. . !pwd . /home/shiya/Documents . !cd .. . !pwd . /home/shiya/Documents .",
            "url": "https://shiyang1101.github.io/Music_transcription_fastai/2022/07/01/music-transcription.html",
            "relUrl": "/2022/07/01/music-transcription.html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://shiyang1101.github.io/Music_transcription_fastai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shiyang1101.github.io/Music_transcription_fastai/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://shiyang1101.github.io/Music_transcription_fastai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shiyang1101.github.io/Music_transcription_fastai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}